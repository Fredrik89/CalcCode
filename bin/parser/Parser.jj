/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Parser.jj */
/*@egen*/PARSER_BEGIN(Parser)
package parser;
public class Parser/*@bgen(jjtree)*/implements ParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTParserState jjtree = new JJTParserState();

/*@egen*/
  /*
    The first and last tokens corresponding to an AST node are saved in that AST node.
    This requires that there is a .jadd-specification which declares the 
    first and last variables for ASTNode.
  */
   public void jjtreeOpenNodeScope(Node n) {
     ((ASTNode)n).first = getToken(1);
   }
   public void jjtreeCloseNodeScope(Node n) {
     ((ASTNode)n).last = getToken(0);
   }
}
PARSER_END(Parser)

/* SCANNER */

/* Skip whitespace */
SKIP : { " " | "\t" | "\n" | "\r" }

/* Reserved words */
TOKEN: {
  < PROCEDURE: "procedure" >
| < BEGIN: "begin" >
| < INTEGER: "integer" >
| < FOR: "for" >
| < UNTIL: "until" >
| < DO: "do" >
| < OD: "od" >
| < IF: "if" >
| < THEN: "then" >
| < ELSE: "else" >
| < FI: "fi" >
| < END: "end">
}

/* Numerals */
TOKEN: {
  < NUMERAL: (["0"-"9"])+ >   
}

/* Operators */
TOKEN: {
  < ASSIGN: "=" >
| < MUL: "*" >
| < ADD: "+" >
| < SUB: "-" >
| < DIV: "/" >
| < GTE: ">=" >
| < LTE: "<=" >
| < LT:  "<" >
| < GT:  ">" >
| < EQ:  "==" >
| < NEQ: "!=" >
}

/* separators */
TOKEN: {
  < LPAR: "(" >
| < RPAR: ")" >
| < SEMI: ";" >
| < COMMA: "," >
}

/* Identifiers */
TOKEN: {
  < ID: (["A"-"Z", "a"-"z"])+ >
}

/* Illegal */
TOKEN: {
  < ERROR: ~[] >
}


/* PARSER */
Start start()       : {/*@bgen(jjtree) Start */
  Start jjtn000 = new Start(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  procedure() <SEMI> <EOF>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
  }
/*@egen*/
  { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void procedure()           : {/*@bgen(jjtree) Procedure */
  Procedure jjtn000 = new Procedure(JJTPROCEDURE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Procedure */
  try {
/*@egen*/
  proc_header() proc_body()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void proc_header() : {}
{
  <PROCEDURE> id() <LPAR>/*@bgen(jjtree) #List( true) */
                          {
                            List jjtn001 = new List(JJTLIST);
                            boolean jjtc001 = true;
                            jjtree.openNodeScope(jjtn001);
                            jjtreeOpenNodeScope(jjtn001);
                          }
                          try {
/*@egen*/ ([ param() ( <COMMA> declaration() )* ])/*@bgen(jjtree)*/
                          } catch (Throwable jjte001) {
                            if (jjtc001) {
                              jjtree.clearNodeScope(jjtn001);
                              jjtc001 = false;
                            } else {
                              jjtree.popNode();
                            }
                            if (jjte001 instanceof RuntimeException) {
                              throw (RuntimeException)jjte001;
                            }
                            if (jjte001 instanceof ParseException) {
                              throw (ParseException)jjte001;
                            }
                            throw (Error)jjte001;
                          } finally {
                            if (jjtc001) {
                              jjtree.closeNodeScope(jjtn001,  true);
                              jjtreeCloseNodeScope(jjtn001);
                            }
                          }
/*@egen*/             <RPAR>
}

void proc_body() : {}
{
  <BEGIN>/*@bgen(jjtree) #List( true) */
          {
            List jjtn001 = new List(JJTLIST);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtreeOpenNodeScope(jjtn001);
          }
          try {
/*@egen*/ stmts()/*@bgen(jjtree)*/
          } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              throw (RuntimeException)jjte001;
            }
            if (jjte001 instanceof ParseException) {
              throw (ParseException)jjte001;
            }
            throw (Error)jjte001;
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  true);
              jjtreeCloseNodeScope(jjtn001);
            }
          }
/*@egen*/             <END>
}

void stmts() : {}
{
   ( stmt() <SEMI>)*
}

void stmt() : {}
{
  ( procedure() | iddecl() | LOOKAHEAD(3) assignment() | LOOKAHEAD(3)/*@bgen(jjtree) ExprStmt */
                                                                      {
                                                                        ExprStmt jjtn001 = new ExprStmt(JJTEXPRSTMT);
                                                                        boolean jjtc001 = true;
                                                                        jjtree.openNodeScope(jjtn001);
                                                                        jjtreeOpenNodeScope(jjtn001);
                                                                      }
                                                                      try {
/*@egen*/ expr()/*@bgen(jjtree)*/
                                                                      } catch (Throwable jjte001) {
                                                                        if (jjtc001) {
                                                                          jjtree.clearNodeScope(jjtn001);
                                                                          jjtc001 = false;
                                                                        } else {
                                                                          jjtree.popNode();
                                                                        }
                                                                        if (jjte001 instanceof RuntimeException) {
                                                                          throw (RuntimeException)jjte001;
                                                                        }
                                                                        if (jjte001 instanceof ParseException) {
                                                                          throw (ParseException)jjte001;
                                                                        }
                                                                        throw (Error)jjte001;
                                                                      } finally {
                                                                        if (jjtc001) {
                                                                          jjtree.closeNodeScope(jjtn001, true);
                                                                          jjtreeCloseNodeScope(jjtn001);
                                                                        }
                                                                      }
/*@egen*/           | ifstmt() | forstmt() )
}

void ifstmt()        : {/*@bgen(jjtree) IfStmt */
  IfStmt jjtn000 = new IfStmt(JJTIFSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IfStmt */
  try {
/*@egen*/
  <IF> expr() <THEN>/*@bgen(jjtree) #List( true) */
                     {
                       List jjtn001 = new List(JJTLIST);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
                       jjtreeOpenNodeScope(jjtn001);
                     }
                     try {
/*@egen*/ stmts()/*@bgen(jjtree)*/
                     } catch (Throwable jjte001) {
                       if (jjtc001) {
                         jjtree.clearNodeScope(jjtn001);
                         jjtc001 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte001 instanceof RuntimeException) {
                         throw (RuntimeException)jjte001;
                       }
                       if (jjte001 instanceof ParseException) {
                         throw (ParseException)jjte001;
                       }
                       throw (Error)jjte001;
                     } finally {
                       if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001,  true);
                         jjtreeCloseNodeScope(jjtn001);
                       }
                     }
/*@egen*/            /*@bgen(jjtree) #List( true) */
                                         {
                                           List jjtn002 = new List(JJTLIST);
                                           boolean jjtc002 = true;
                                           jjtree.openNodeScope(jjtn002);
                                           jjtreeOpenNodeScope(jjtn002);
                                         }
                                         try {
/*@egen*/ [<ELSE> stmts()]/*@bgen(jjtree)*/
                                         } catch (Throwable jjte002) {
                                           if (jjtc002) {
                                             jjtree.clearNodeScope(jjtn002);
                                             jjtc002 = false;
                                           } else {
                                             jjtree.popNode();
                                           }
                                           if (jjte002 instanceof RuntimeException) {
                                             throw (RuntimeException)jjte002;
                                           }
                                           if (jjte002 instanceof ParseException) {
                                             throw (ParseException)jjte002;
                                           }
                                           throw (Error)jjte002;
                                         } finally {
                                           if (jjtc002) {
                                             jjtree.closeNodeScope(jjtn002,  true);
                                             jjtreeCloseNodeScope(jjtn002);
                                           }
                                         }
/*@egen*/             <FI>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}


void forstmt()         : {/*@bgen(jjtree) ForStmt */
  ForStmt jjtn000 = new ForStmt(JJTFORSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ForStmt */
  try {
/*@egen*/
  <FOR> stmt() <UNTIL> expr() <DO>/*@bgen(jjtree) #List( true) */
                                   {
                                     List jjtn001 = new List(JJTLIST);
                                     boolean jjtc001 = true;
                                     jjtree.openNodeScope(jjtn001);
                                     jjtreeOpenNodeScope(jjtn001);
                                   }
                                   try {
/*@egen*/ stmts()/*@bgen(jjtree)*/
                                   } catch (Throwable jjte001) {
                                     if (jjtc001) {
                                       jjtree.clearNodeScope(jjtn001);
                                       jjtc001 = false;
                                     } else {
                                       jjtree.popNode();
                                     }
                                     if (jjte001 instanceof RuntimeException) {
                                       throw (RuntimeException)jjte001;
                                     }
                                     if (jjte001 instanceof ParseException) {
                                       throw (ParseException)jjte001;
                                     }
                                     throw (Error)jjte001;
                                   } finally {
                                     if (jjtc001) {
                                       jjtree.closeNodeScope(jjtn001,  true);
                                       jjtreeCloseNodeScope(jjtn001);
                                     }
                                   }
/*@egen*/             <OD>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void param()       : {/*@bgen(jjtree) Param */
  Param jjtn000 = new Param(JJTPARAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Param */
                         try {
/*@egen*/declaration()/*@bgen(jjtree)*/
                         } catch (Throwable jjte000) {
                           if (jjtc000) {
                             jjtree.clearNodeScope(jjtn000);
                             jjtc000 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte000 instanceof RuntimeException) {
                             throw (RuntimeException)jjte000;
                           }
                           if (jjte000 instanceof ParseException) {
                             throw (ParseException)jjte000;
                           }
                           throw (Error)jjte000;
                         } finally {
                           if (jjtc000) {
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtreeCloseNodeScope(jjtn000);
                           }
                         }
/*@egen*/}
void iddecl()        : {/*@bgen(jjtree) IdDecl */
  IdDecl jjtn000 = new IdDecl(JJTIDDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) IdDecl */
                           try {
/*@egen*/declaration()/*@bgen(jjtree)*/
                           } catch (Throwable jjte000) {
                             if (jjtc000) {
                               jjtree.clearNodeScope(jjtn000);
                               jjtc000 = false;
                             } else {
                               jjtree.popNode();
                             }
                             if (jjte000 instanceof RuntimeException) {
                               throw (RuntimeException)jjte000;
                             }
                             if (jjte000 instanceof ParseException) {
                               throw (ParseException)jjte000;
                             }
                             throw (Error)jjte000;
                           } finally {
                             if (jjtc000) {
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtreeCloseNodeScope(jjtn000);
                             }
                           }
/*@egen*/}
void declaration() : {}
{
  type() id()/*@bgen(jjtree) #Opt( true) */
              {
                Opt jjtn001 = new Opt(JJTOPT);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
                jjtreeOpenNodeScope(jjtn001);
              }
              try {
/*@egen*/ ([ <ASSIGN> expr() ])/*@bgen(jjtree)*/
              } catch (Throwable jjte001) {
                if (jjtc001) {
                  jjtree.clearNodeScope(jjtn001);
                  jjtc001 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                  throw (RuntimeException)jjte001;
                }
                if (jjte001 instanceof ParseException) {
                  throw (ParseException)jjte001;
                }
                throw (Error)jjte001;
              } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001,  true);
                  jjtreeCloseNodeScope(jjtn001);
                }
              }
/*@egen*/           
}

void assignment()       : {/*@bgen(jjtree) Assgn */
  Assgn jjtn000 = new Assgn(JJTASSGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Assgn */
  try {
/*@egen*/
  iduse() <ASSIGN> expr()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/ 
}

void expr() : {}
{
  numexpr() [
      <LT>/*@bgen(jjtree) #Lt( 2) */
           {
             Lt jjtn001 = new Lt(JJTLT);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
             jjtreeOpenNodeScope(jjtn001);
           }
           try {
/*@egen*/ numexpr()/*@bgen(jjtree)*/
           } catch (Throwable jjte001) {
             if (jjtc001) {
               jjtree.clearNodeScope(jjtn001);
               jjtc001 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte001 instanceof RuntimeException) {
               throw (RuntimeException)jjte001;
             }
             if (jjte001 instanceof ParseException) {
               throw (ParseException)jjte001;
             }
             throw (Error)jjte001;
           } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001,  2);
               jjtreeCloseNodeScope(jjtn001);
             }
           }
/*@egen*/       
    | <GT>/*@bgen(jjtree) #Gt( 2) */
           {
             Gt jjtn002 = new Gt(JJTGT);
             boolean jjtc002 = true;
             jjtree.openNodeScope(jjtn002);
             jjtreeOpenNodeScope(jjtn002);
           }
           try {
/*@egen*/ numexpr()/*@bgen(jjtree)*/
           } catch (Throwable jjte002) {
             if (jjtc002) {
               jjtree.clearNodeScope(jjtn002);
               jjtc002 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte002 instanceof RuntimeException) {
               throw (RuntimeException)jjte002;
             }
             if (jjte002 instanceof ParseException) {
               throw (ParseException)jjte002;
             }
             throw (Error)jjte002;
           } finally {
             if (jjtc002) {
               jjtree.closeNodeScope(jjtn002,  2);
               jjtreeCloseNodeScope(jjtn002);
             }
           }
/*@egen*/       
    | <GTE>/*@bgen(jjtree) #Gte( 2) */
            {
              Gte jjtn003 = new Gte(JJTGTE);
              boolean jjtc003 = true;
              jjtree.openNodeScope(jjtn003);
              jjtreeOpenNodeScope(jjtn003);
            }
            try {
/*@egen*/ numexpr()/*@bgen(jjtree)*/
            } catch (Throwable jjte003) {
              if (jjtc003) {
                jjtree.clearNodeScope(jjtn003);
                jjtc003 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte003 instanceof RuntimeException) {
                throw (RuntimeException)jjte003;
              }
              if (jjte003 instanceof ParseException) {
                throw (ParseException)jjte003;
              }
              throw (Error)jjte003;
            } finally {
              if (jjtc003) {
                jjtree.closeNodeScope(jjtn003,  2);
                jjtreeCloseNodeScope(jjtn003);
              }
            }
/*@egen*/        
    | <LTE>/*@bgen(jjtree) #Lte( 2) */
            {
              Lte jjtn004 = new Lte(JJTLTE);
              boolean jjtc004 = true;
              jjtree.openNodeScope(jjtn004);
              jjtreeOpenNodeScope(jjtn004);
            }
            try {
/*@egen*/ numexpr()/*@bgen(jjtree)*/
            } catch (Throwable jjte004) {
              if (jjtc004) {
                jjtree.clearNodeScope(jjtn004);
                jjtc004 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte004 instanceof RuntimeException) {
                throw (RuntimeException)jjte004;
              }
              if (jjte004 instanceof ParseException) {
                throw (ParseException)jjte004;
              }
              throw (Error)jjte004;
            } finally {
              if (jjtc004) {
                jjtree.closeNodeScope(jjtn004,  2);
                jjtreeCloseNodeScope(jjtn004);
              }
            }
/*@egen*/        
    | <EQ>/*@bgen(jjtree) #Eq( 2) */
           {
             Eq jjtn005 = new Eq(JJTEQ);
             boolean jjtc005 = true;
             jjtree.openNodeScope(jjtn005);
             jjtreeOpenNodeScope(jjtn005);
           }
           try {
/*@egen*/ numexpr()/*@bgen(jjtree)*/
           } catch (Throwable jjte005) {
             if (jjtc005) {
               jjtree.clearNodeScope(jjtn005);
               jjtc005 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte005 instanceof RuntimeException) {
               throw (RuntimeException)jjte005;
             }
             if (jjte005 instanceof ParseException) {
               throw (ParseException)jjte005;
             }
             throw (Error)jjte005;
           } finally {
             if (jjtc005) {
               jjtree.closeNodeScope(jjtn005,  2);
               jjtreeCloseNodeScope(jjtn005);
             }
           }
/*@egen*/       
    | <NEQ>/*@bgen(jjtree) #Neq( 2) */
            {
              Neq jjtn006 = new Neq(JJTNEQ);
              boolean jjtc006 = true;
              jjtree.openNodeScope(jjtn006);
              jjtreeOpenNodeScope(jjtn006);
            }
            try {
/*@egen*/ numexpr()/*@bgen(jjtree)*/
            } catch (Throwable jjte006) {
              if (jjtc006) {
                jjtree.clearNodeScope(jjtn006);
                jjtc006 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte006 instanceof RuntimeException) {
                throw (RuntimeException)jjte006;
              }
              if (jjte006 instanceof ParseException) {
                throw (ParseException)jjte006;
              }
              throw (Error)jjte006;
            } finally {
              if (jjtc006) {
                jjtree.closeNodeScope(jjtn006,  2);
                jjtreeCloseNodeScope(jjtn006);
              }
            }
/*@egen*/        
  ]
}

void numexpr() : {}
{
  term() ( 
      <ADD>/*@bgen(jjtree) #Add( 2) */
            {
              Add jjtn001 = new Add(JJTADD);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
              jjtreeOpenNodeScope(jjtn001);
            }
            try {
/*@egen*/ term()/*@bgen(jjtree)*/
            } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                throw (RuntimeException)jjte001;
              }
              if (jjte001 instanceof ParseException) {
                throw (ParseException)jjte001;
              }
              throw (Error)jjte001;
            } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001,  2);
                jjtreeCloseNodeScope(jjtn001);
              }
            }
/*@egen*/         
    | <SUB>/*@bgen(jjtree) #Sub( 2) */
            {
              Sub jjtn002 = new Sub(JJTSUB);
              boolean jjtc002 = true;
              jjtree.openNodeScope(jjtn002);
              jjtreeOpenNodeScope(jjtn002);
            }
            try {
/*@egen*/ term()/*@bgen(jjtree)*/
            } catch (Throwable jjte002) {
              if (jjtc002) {
                jjtree.clearNodeScope(jjtn002);
                jjtc002 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte002 instanceof RuntimeException) {
                throw (RuntimeException)jjte002;
              }
              if (jjte002 instanceof ParseException) {
                throw (ParseException)jjte002;
              }
              throw (Error)jjte002;
            } finally {
              if (jjtc002) {
                jjtree.closeNodeScope(jjtn002,  2);
                jjtreeCloseNodeScope(jjtn002);
              }
            }
/*@egen*/        
  )*
}

void term() : {}
{
  factor() ( 
      <MUL>/*@bgen(jjtree) #Mul( 2) */
            {
              Mul jjtn001 = new Mul(JJTMUL);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
              jjtreeOpenNodeScope(jjtn001);
            }
            try {
/*@egen*/ factor()/*@bgen(jjtree)*/
            } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                throw (RuntimeException)jjte001;
              }
              if (jjte001 instanceof ParseException) {
                throw (ParseException)jjte001;
              }
              throw (Error)jjte001;
            } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001,  2);
                jjtreeCloseNodeScope(jjtn001);
              }
            }
/*@egen*/         
    | <DIV>/*@bgen(jjtree) #Div( 2) */
            {
              Div jjtn002 = new Div(JJTDIV);
              boolean jjtc002 = true;
              jjtree.openNodeScope(jjtn002);
              jjtreeOpenNodeScope(jjtn002);
            }
            try {
/*@egen*/ factor()/*@bgen(jjtree)*/
            } catch (Throwable jjte002) {
              if (jjtc002) {
                jjtree.clearNodeScope(jjtn002);
                jjtc002 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte002 instanceof RuntimeException) {
                throw (RuntimeException)jjte002;
              }
              if (jjte002 instanceof ParseException) {
                throw (ParseException)jjte002;
              }
              throw (Error)jjte002;
            } finally {
              if (jjtc002) {
                jjtree.closeNodeScope(jjtn002,  2);
                jjtreeCloseNodeScope(jjtn002);
              }
            }
/*@egen*/         
  )*
}

void factor() : {}
{
  LOOKAHEAD(2) funccall() | iduse() | numeral() | <LPAR> expr() <RPAR>
}

void funccall()          : {/*@bgen(jjtree) FuncCall */
  FuncCall jjtn000 = new FuncCall(JJTFUNCCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FuncCall */
  try {
/*@egen*/
  id() <LPAR>/*@bgen(jjtree) #List( true) */
               {
                 List jjtn001 = new List(JJTLIST);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
                 jjtreeOpenNodeScope(jjtn001);
               }
               try {
/*@egen*/  ([ arglist() ])/*@bgen(jjtree)*/
               } catch (Throwable jjte001) {
                 if (jjtc001) {
                   jjtree.clearNodeScope(jjtn001);
                   jjtc001 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte001 instanceof RuntimeException) {
                   throw (RuntimeException)jjte001;
                 }
                 if (jjte001 instanceof ParseException) {
                   throw (ParseException)jjte001;
                 }
                 throw (Error)jjte001;
               } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001,  true);
                   jjtreeCloseNodeScope(jjtn001);
                 }
               }
/*@egen*/             <RPAR>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void arglist() : {}
{
  expr() ( <COMMA> expr() )*
}


void numeral()         : 
{/*@bgen(jjtree) Numeral */
  Numeral jjtn000 = new Numeral(JJTNUMERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) Numeral */
  try {
/*@egen*/
  t = <NUMERAL>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
  }
/*@egen*/
  {jjtn000.setNUMERAL(t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void iduse()        : {/*@bgen(jjtree) IdUse */
  IdUse jjtn000 = new IdUse(JJTIDUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IdUse */
        try {
/*@egen*/
	id()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void id()    :
{/*@bgen(jjtree) Id */
  Id jjtn000 = new Id(JJTID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/ Token t; } 
{/*@bgen(jjtree) Id */
  try {
/*@egen*/
  t = <ID>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
  }
/*@egen*/
  { jjtn000.setID(t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void type()      :
{/*@bgen(jjtree) Type */
  Type jjtn000 = new Type(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/ Token t; } 
{/*@bgen(jjtree) Type */
  try {
/*@egen*/
  t = <INTEGER>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
  }
/*@egen*/
  { jjtn000.setINTEGER(t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}
